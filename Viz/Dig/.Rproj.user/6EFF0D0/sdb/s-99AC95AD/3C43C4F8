{
    "collab_server" : "",
    "contents" : "library(shiny)\n#options(shiny.trace=TRUE)\n#options(shiny.fullstacktrace = TRUE)\n#options(error = function() traceback(2))\n#options(shiny.error = function() traceback(2))\n\npalette(c(\"#E41A1C\", \"#377EB8\", \"#4DAF4A\", \"#984EA3\",\n          \"#FF7F00\", \"#FFFF33\", \"#A65628\", \"#F781BF\", \"#999999\"))\n\nshinyServer(function(input, output, clientData, session) {\n  # Get Data -----------------------------------------------------------------\n  raw <- c()\n  query <- parseQueryString(isolate(session$clientData$url_search))\n\n  # output$debug <- renderText({\n  #   paste(names(query), query, sep = \"=\", collapse=\", \")\n  # })\n\n  if (!is.null(query[['csvfilename']])) {\n    # raw.csv(paste0(dirname(sys.frame(1)$ofile), \"/../webserver/public/csvs/\", query[['csvfilename']]), fill=T)\n    # raw = read.csv(paste0(dirname(\"/csvs/\", query[['csvfilename']]), fill=T)\n    raw = read.csv(paste(\"/media/sf_kevin/Downloads/\", query[['csvfilename']], sep=''), fill=T)\n  }\n  else\n  {\n    # raw = read.csv(\"../data.csv\", fill=T)\n    raw = read.csv(\"../../results/mergedPET.csv\", fill=T)\n  }\n  \n  # Pre-processing -----------------------------------------------------------\n  varNames = names(raw)\n  varClass = sapply(raw,class)\n  varFactor <- varNames[varClass == \"factor\"]\n  \n  rawAbsMin = apply(raw, 2, min, na.rm=TRUE)\n  rawAbsMax = apply(raw, 2, max, na.rm=TRUE)\n  \n  varRange <- varNames[((as.numeric(rawAbsMax)-as.numeric(rawAbsMin))!= \"0\")]\n  varRange <- varRange[!is.na(varRange)]\n  varRangeNum <- varRange[varClass[varRange] == \"numeric\" | varClass[varRange] == \"integer\"]\n  print(paste(\"varRange\", varRangeNum))\n\n  print(\"Updating Panel Selections...\")\n  updateSelectInput(session, \"colVarNum\", choices = varRangeNum, selected = varRangeNum[c(1)])\n  updateSelectInput(session, \"display\", choices = varRange, selected = varRange[c(1,2)])\n  updateSelectInput(session, \"xInput\", choices = varRange, selected = varRange[c(1)])\n  updateSelectInput(session, \"yInput\", choices = varRange, selected = varRange[c(2)])\n  \n  resetPlotOptions <- observeEvent(input$resetOptions, {\n    print(\"In resetPlotOptions()\")\n    updateSelectInput(session, \"display\", selected = varRange[c(1,2)])\n    updateCheckboxInput(session, \"color\", value = FALSE)\n    # updateSelectInput(session, \"colType\", selected = \"Max/Min\")\n  })\n  \n  # resetViewerOptions <- observeEvent(input$resetSettings, {\n  #   print(\"In resetViewerSettings()\")\n  #   updateCheckboxInput(session, \"autoRender\", value = TRUE)\n  #   updateRadioButtons(session, \"pointStyle\", choices = c(\"Normal\" = 1,\"Filled\" = 19), selected = \"Normal\")\n  #   updateRadioButtons(session, \"pointSize\", choices = c(\"Small\" = 1,\"Medium\" = 1.5,\"Large\" = 2), selected = \"Small\")\n  # })\n  \n  # Sliders ------------------------------------------------------------------\n  output$enums <- renderUI({\n    fluidRow(\n      lapply(1:length(varNames), function(column) {\n        if (varClass[column] == \"factor\" & length(names(table(raw[varNames[column]]))) > 1) {\n          column(2,\n                 selectInput(paste0('inp', column),\n                             varNames[column],\n                             multiple = TRUE,\n                             selectize = FALSE,\n                             choices = names(table(raw[varNames[column]])),\n                             selected = names(table(raw[varNames[column]])))\n          )\n        }\n      })\n    )\n  })\n  \n  output$sliders <- renderUI({\n    fluidRow(\n      lapply(1:length(varNames), function(column) {\n        print(paste(column, varNames[column], varClass[column]))\n        if(varClass[column] == \"numeric\") {\n          max <- as.numeric(unname(rawAbsMax[varNames[column]]))\n          min <- as.numeric(unname(rawAbsMin[varNames[column]]))\n          diff <- (max-min)\n          # print(paste(column, \"min\", min, \"max\", max, \"diff\", diff))\n          if (diff != 0) {\n            step <- max(diff*0.01, abs(min)*0.001, abs(max)*0.001)\n            # cat(\"step\", diff*0.01, abs(min)*0.001, abs(max)*0.001, \"\\n\", sep = \" \")\n            column(2,\n              sliderInput(paste0('inp', column),\n                          varNames[column],\n                          step = signif(step, digits = 4),\n                          min = signif(min-step*10, digits = 4),\n                          max = signif(max+step*10, digits = 4),\n                          value = c(signif(min-step*10, digits = 4), signif(max+step*10, digits = 4)))\n            )\n          }\n        } else {\n          if (varClass[column] == \"integer\") {\n            max <- as.integer(unname(rawAbsMax[varNames[column]]))\n            min <- as.integer(unname(rawAbsMin[varNames[column]]))\n            if (min != max) {\n              column(2,\n                sliderInput(paste0('inp', column),\n                            varNames[column],\n                            min = min,\n                            max = max,\n                            value = c(min, max))\n              )\n            }\n          }\n        }\n      })\n    )\n  })\n  \n  output$constants <- renderUI({\n    fluidRow(\n      lapply(1:length(varNames), function(column) {\n        print(paste(column, varNames[column], varClass[column]))\n        if(varClass[column] == \"numeric\") {\n          max <- as.numeric(unname(rawAbsMax[varNames[column]]))\n          min <- as.numeric(unname(rawAbsMin[varNames[column]]))\n          diff <- (max-min)\n          if (diff == 0) {column(2, p(strong(paste0(varNames[column],\":\")), min))}\n        } else {\n          if (varClass[column] == \"integer\") {\n            max <- as.integer(unname(rawAbsMax[varNames[column]]))\n            min <- as.integer(unname(rawAbsMin[varNames[column]]))\n            if (min == max) {column(2, p(strong(paste0(varNames[column],\":\")), min))}\n          } else {\n            if (varClass[column] == \"factor\" & length(names(table(raw[varNames[column]]))) == 1) {\n              column(2, p(strong(paste0(varNames[column],\":\")), names(table(raw[varNames[column]]))))\n            }\n          }\n        }\n      })\n    )\n  })\n  \n  resetDefaultSliders <- observeEvent(input$resetSliders, {\n    print(\"In resetDefaultSliders()\")\n    for(column in 1:length(varNames)) {\n      if(varClass[column] == \"numeric\") {\n        max <- as.numeric(unname(rawAbsMax[varNames[column]]))\n        min <- as.numeric(unname(rawAbsMin[varNames[column]]))\n        diff <- (max-min)\n        if (diff != 0) {\n          step <- max(diff*0.01, abs(min)*0.001, abs(max)*0.001)\n          updateSliderInput(session, paste0('inp', column), value = c(signif(min-step*10, digits = 4), signif(max+step*10, digits = 4)))\n        }\n      } else {\n        if(varClass[column] == \"integer\") {\n          max <- as.integer(unname(rawAbsMax[varNames[column]]))\n          min <- as.integer(unname(rawAbsMin[varNames[column]]))\n          if(min != max) {\n            updateSliderInput(session, paste0('inp', column), value = c(min, max))\n          }\n        } else {\n          if(varClass[column] == \"factor\") {\n            updateSelectInput(session, paste0('inp', column), selected = names(table(raw[varNames[column]])))\n          }\n        }\n      }\n    }\n  })\n  \n  # Data functions -----------------------------------------------------------\n  filterData <- reactive({\n    print(\"In filterData()\")\n    data <- raw\n    # print(paste(\"Length of VarNames:\", length(varNames)))\n    for(column in 1:length(varNames)) {\n      inpName=paste(\"inp\",toString(column),sep=\"\")\n      nname = varNames[column]\n      rng = input[[inpName]]\n      # print(paste(\"column: \", column, \"Checking\", nname, \"rng\", rng[1], \"(\", rawAbsMin[column], \",\", rawAbsMax[column], \")\", rng[2]))\n      if(length(rng) != 0) {\n        if((varClass[column]==\"numeric\" | varClass[column]==\"integer\")) {\n          # print(paste(\"Filtering between\", rng[1], \"and\", rng[2]))\n          data <- data[data[nname] >= rng[1],]\n          data <- data[data[nname] <= rng[2],]\n        } else {\n          if (varClass[column]==\"factor\") {\n            # print(paste(class(rng)))\n            # print(paste(rng))\n            data <- data[data[[nname]] %in% rng,]\n          }\n        }\n      }\n      \n      # cat(\"-----------\", inpName, nname, rng, length(data[nname]), sep = '\\n')\n    }\n    print(\"Data Filtered\")\n    data\n  })\n\n  colorData <- reactive({\n    print(\"In colorData()\")\n    slider <- input$colSlider\n    data <- filterData()\n    data$color <- character(nrow(data))\n    data$color <- \"black\"\n    if (input$color == TRUE) {\n      # if (input$colType == \"Max/Min\") {\n        name <- isolate(input$colVarNum)\n        bottom <- slider[1]\n        top <- slider[2]\n        print(paste(\"Coloring Data:\", name, bottom, top))\n        data$color[(data[[name]] >= bottom) & (data[[name]] <= top)] <- \"yellow\"\n        if (input$radio == \"max\") {\n          data$color[data[[name]] < bottom] <- \"red\"\n          data$color[data[[name]] > top] <- \"green\"\n        } else {\n          data$color[data[[name]] < bottom] <- \"green\"\n          data$color[data[[name]] > top] <- \"red\"\n        }\n      # } else {\n      #   # Coloring of factors is currently unsupported!\n      #   # data$color[data[[paste(input$colVarFactor)]] %in% input$colSelect,]\n      # }\n    }\n    print(\"Data Colored\")\n    data\n  })\n  \n  rangesData <- reactive({\n    # for(column in 1:length(varNames)) {\n    #   inpName=paste(\"inp\",toString(column),sep=\"\")\n    #   nname = varNames[column]\n    #   rng = input[[inpName]]\n    #   if(length(rng) != 0) {\n    #     if((varClass[column]==\"numeric\" | varClass[column]==\"integer\")) {\n    #       # print(paste(\"Filtering between\", rng[1], \"and\", rng[2]))\n    #       data <- data[data[nname] >= rng[1],]\n    #       data <- data[data[nname] <= rng[2],]\n    #     }\n    #   }\n    # }\n    maxes <- apply(isolate(filterData()), 2, function(x) max(x, na.rm = TRUE))\n    print(paste(maxes))\n  })\n\n  # Pairs Tab ----------------------------------------------------------------\n  output$pairsPlot <- renderPlot({\n    if (input$autoRender == TRUE) {\n      vars <- varsList()\n      data <- colorData()\n    } else {\n      vars <- slowVarsList()\n      data <- slowData()\n    }\n    validate(need(length(vars)>=2, \"Please select two or more display variables.\"))\n    \n    print(\"Rendering Plot.\")\n    # if(input$colType == 'Discrete') {\n    #   print(\"Printing 'Discrete' plot.\")\n    #   pairs(data[vars],lower.panel = panel.smooth,upper.panel=NULL, col=data$color, pch = as.numeric(input$pointStyle))\n    #   legend('topright',legend=levels(colorData()[[paste(varFactor[1])]]),pch=1,title=paste(varFactor[1]))\n    # } else {\n      # print(as.numeric(input$pointStyle))\n      pairs(data[vars],lower.panel = panel.smooth,upper.panel=NULL, col=data$color, pch = as.numeric(input$pointStyle), cex = as.numeric(input$pointSize))\n    # }\n    print(\"Plot Rendered.\")\n  })\n  \n  varsList <- reactive({\n    print(\"Getting Variable List.\")\n    idx = 0\n    for(choice in 1:length(input$display)) {\n      mm <- match(input$display[choice],varNames)\n      if(mm > 0) { idx <- c(idx,mm) }\n    }\n    print(idx)\n    idx\n  })\n  \n  slowVarsList <- eventReactive(input$renderPlot, {\n    print(paste(\"input$renderPlot:\", input$renderPlot))\n    print(\"Getting Variable List.\")\n    idx = 0\n    for(choice in 1:length(input$display)) {\n      mm <- match(input$display[choice],varNames)\n      if(mm > 0) { idx <- c(idx,mm) }\n    }\n    print(idx)\n    idx\n  })\n  \n  slowData <- eventReactive(input$renderPlot, {\n    colorData()\n  })\n  \n  output$stats <- renderText({\n    infoTable()\n  })\n\n  infoTable <- eventReactive(input$updateStats, {\n    tb <- table(factor(colorData()$color, c(\"green\", \"yellow\", \"red\", \"black\")))\n    if (input$color) { # & input$colType == 'Max/Min') {\n      paste0(\"Total Points: \", nrow(raw),\n             \"\\nCurrent Points: \", nrow(filterData()),\n             \"\\nVisible Points: \", sum(tb[[\"green\"]], tb[[\"yellow\"]], tb[[\"red\"]], tb[[\"black\"]]),\n             \"\\nGreen Points: \", tb[[\"green\"]],\n             \"\\nYellow Points: \", tb[[\"yellow\"]],\n             \"\\nRed Points: \", tb[[\"red\"]]\n      )\n    } else {\n      paste0(\"Total Points: \", nrow(raw),\n             \"\\nCurrent Points: \", nrow(filterData()),\n             \"\\nVisible Points: \", tb[[\"black\"]]\n      )\n    }\n  })\n\n  output$exportData <- downloadHandler(\n    filename = function() { paste('data-', Sys.Date(), '.csv', sep='') },\n    content = function(file) { write.csv(filterData(), file) }\n  )\n  \n  output$exportRanges <- downloadHandler(\n    filename = function() { paste('ranges-', Sys.Date(), '.csv', sep='') },\n    content = function(file) { write.csv(rangesData(), file) }\n  )\n  \n  output$exportPlot <- downloadHandler(\n    filename = function() { paste('plot-', Sys.Date(), '.pdf', sep='') },\n    content = function(file) {\n      pdf(paste('plot-', Sys.Date(), '.pdf', sep=''), width = 10, height = 10)\n      pairs(colorData()[varsList()],lower.panel = panel.smooth,upper.panel=NULL, col=colorData()$color)\n      dev.off()\n      file.copy(paste('plot-', Sys.Date(), '.pdf', sep=''), file)\n    }\n  )\n  \n  # Single Plot Tab ----------------------------------------------------------\n\n  output$singlePlot <- renderPlot({\n    data <- filterData()\n    plot(data[[paste(input$xInput)]], data[[paste(input$yInput)]], xlab = paste(input$xInput), ylab = paste(input$yInput), pch = as.numeric(input$pointStyle))\n  })\n\n  output$info <- renderPrint({\n    t(nearPoints(filterData(), input$plot_click, xvar = input$xInput, yvar = input$yInput, maxpoints = 8))\n  })\n\n  # Data Table Tab --------------------------------------------------------------------------------\n  output$table <- renderDataTable({\n    input$updateDataTable\n    data <- isolate(filterData())\n  })\n  \n  # Ranges Table Tab --------------------------------------------------------------------------------\n  output$ranges <- renderPrint({\n    input$updateRanges\n    # summary(filterData())\n    rangeText <- summary(isolate(filterData()))\n    # print(rangeText)\n    t(rangeText)\n  })\n  \n  # UI Adjustments -----------------------------------------------------------\n  updateColorSlider <- function() {\n    data <- isolate(filterData())\n    min <- min(data[[paste(input$colVarNum)]], na.rm=TRUE)\n    max <- max(data[[paste(input$colVarNum)]], na.rm=TRUE)\n    print(paste(\"colSlider:\", isolate(input$colSlider[1]), isolate(input$colSlider[2])))\n    print(paste(\"In updateColorSlider(). colVarNum:\", input$colVarNum, min, max))\n    thirtythree <- quantile(data[[paste(input$colVarNum)]], 0.33, na.rm=TRUE)\n    sixtysix <- quantile(data[[paste(input$colVarNum)]], 0.66, na.rm=TRUE)\n    \n    absMin <- as.numeric(unname(rawAbsMin[paste(input$colVarNum)]))\n    absMax <- as.numeric(unname(rawAbsMax[paste(input$colVarNum)]))\n    absStep <- max((max-min)*0.01, abs(min)*0.001, abs(max)*0.001)\n    # print(paste(\"class(max)\", class(max), \"class(min)\", class(min)))\n    # print(paste(\"class(absMax)\", class(absMax), \"class(absMin)\", class(absMin), \"class(absStep)\", class(absStep)))\n    # print(paste(absMin, min, max, absMax))\n    if(varClass[[input$colVarNum]] == \"numeric\") {\n      # print(\"In updated slider: numeric\")\n      # if (absMax == absMin) {absMax <- (absMax + 1)}\n      updateSliderInput(session,\n                        \"colSlider\",\n                        step = signif(absStep, digits = 4),\n                        min = signif(absMin-absStep*10, digits = 4),\n                        max = signif(absMax+absStep*10, digits = 4),\n                        value = c(unname(thirtythree), unname(sixtysix))\n      )\n    }\n    if(varClass[[input$colVarNum]] == \"integer\") {\n      # print(\"In updated slider: integer\")\n      # if (absMax == absMin) {absMax <- (absMax + 1)}\n      updateSliderInput(session,\n                        \"colSlider\",\n                        min = absMin,\n                        max = absMax,\n                        value = c(floor(thirtythree), ceiling(sixtysix))\n      )\n    }\n  }\n\n  updateXSlider <- observeEvent(input$updateX, {\n    updateSlider(input$xInput, input$plot_brush$xmin, input$plot_brush$xmax)\n  })\n  \n  updateYSlider <- observeEvent(input$updateY, {\n    updateSlider(input$yInput, input$plot_brush$ymin, input$plot_brush$ymax)\n  })\n  \n  updateBothSlider <- observeEvent(input$updateBoth, {\n    updateSlider(input$xInput, input$plot_brush$xmin, input$plot_brush$xmax)\n    updateSlider(input$yInput, input$plot_brush$ymin, input$plot_brush$ymax)\n  })\n  \n  updateSlider <- function(varName, min, max) {\n    if(!is.null(min) & !is.null(max)) {\n      if(varName %in% varRangeNum) {\n        print(paste0(\"Updating \", varName, \" Slider: \", min, \" to \", max))\n        updateSliderInput(session,\n                          paste0(\"inp\", match(varName, varNames)),\n                          value = c(min, max))\n      } else {\n        if(varClass[[varName]] == \"factor\") {\n          selectedFactors <- ceiling(min):floor(max)\n          names <- levels(filterData()[[varName]])[selectedFactors]\n          print(paste0(\"Updating \", varName, \": \", names))\n          updateSelectInput(session, paste0('inp', match(varName, varNames)), selected = names)\n        } else {print(paste0(\"Error: can't update slider for '\", varName, \"'.\"))}\n      }\n    } else {print(\"Error: no selection available for update.\")}\n  }\n\n  constrainXVariable <- eventReactive (input$updateX, {\n    print(\"In constrainXVariable()\")\n    #print(paste(\"new upper value\", input$xInput, \"=\", input$plot_brush$xmax))\n    #updateSliderInput()\n  })\n  \n  observe({\n    print(\"Observing.\")\n    if (!is.null(isolate(colorData())) & !(as.character(input[[\"colVarNum\"]]) == \"\")) {\n      updateColorSlider()\n    }\n  })\n})\n",
    "created" : 1448053335375.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3685815276",
    "id" : "3C43C4F8",
    "lastKnownWriteTime" : 1456954864,
    "path" : "~/Desktop/dig/Dig/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}